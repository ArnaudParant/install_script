version = "3.0.3"
description = "Eliom: module for generating pages"

package "server" (
description = "Eliom: server-side"
version = "[distributed with Eliom]"
directory = "server"
requires = "ocsigenserver,ocsigenserver.ext,js_of_ocaml.deriving,react,calendar,tyxml,lwt.react,cryptokit"
requires(syntax) += "js_of_ocaml.deriving.syntax,lwt.syntax,tyxml.syntax"
archive(byte) = "eliom.cma"
archive(native) = "eliom.cmxa"
)

package "client" (
description = "Eliom client-side"
version = "[distributed with Eliom]"
directory = "client"
requires = "ocsigenserver.cookies,ocsigenserver.polytables,ocsigenserver.baselib.base,js_of_ocaml,js_of_ocaml.deriving,lwt.react,tyxml.functor"
requires(syntax) += "lwt.syntax,js_of_ocaml.syntax,js_of_ocaml.deriving.syntax,tyxml.syntax"
archive(byte) = "eliom_client.cma eliom_client_main.cmo"
linkopts(javascript) = "+eliom.client/eliom_client.js"
linkopts(javascript) += "+js_of_ocaml/weak.js"
linkopts(javascript) += "+js_of_ocaml/classlist.js"
)

package "syntax" (
description = "Syntax extension: spliting client and server code (base)"
version = "[distributed with Eliom]"
requires = "js_of_ocaml.deriving.syntax,lwt.syntax,tyxml.syntax,lwt.syntax,js_of_ocaml.syntax,js_of_ocaml.deriving.syntax,tyxml.syntax"
archive(preprocessor,syntax) = "pa_eliom_seed.cmo"
directory = "syntax"

package "type" (
description = "Syntax extension: spliting client and server code (type inference)"
version = "[distributed with Eliom]"
requires = "eliom.syntax"
archive(preprocessor,syntax) = "pa_eliom_type_filter.cmo"
)

package "server" (
description = "Syntax extension: spliting client and server code (server side)"
version = "[distributed with Eliom]"
requires = "eliom.syntax"
archive(preprocessor,syntax) = "pa_eliom_client_server.cmo"
)

package "client" (
description = "Syntax extension: spliting client and server code (client side)"
version = "[distributed with Eliom]"
requires = "eliom.syntax"
archive(preprocessor,syntax) = "pa_eliom_client_client.cmo"
)
)

package "ocamlbuild" (
description = "Eliom ocamlbuild plugin (js_of_ocaml part included)"
version = "[distributed with Eliom]"
directory = "ocamlbuild"
requires = "eliom.ocamlbuild.core js_of_ocaml.ocamlbuild"
archive(byte) = "ocamlbuild_eliom.cma"
archive(byte,plugin) = "ocamlbuild_eliom.cma"
archive(native) = "ocamlbuild_eliom.cmxa"
archive(native,plugin) = "ocamlbuild_eliom.cmxs"

package "core" (
description = "Eliom ocamlbuild plugin (base)"
version = "[distributed with Eliom]"
requires = "ocamlbuild"
archive(byte) = "ocamlbuild_eliom_core.cma"
archive(byte,plugin) = "ocamlbuild_eliom_core.cma"
archive(native) = "ocamlbuild_eliom_core.cmxa"
archive(native,plugin) = "ocamlbuild_eliom_core.cmxs"
)
)
